generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model levels {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String
  input_data    Json          // Contains puzzleData, testCases, and metadata
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  updated_at    DateTime?     @default(now()) @db.Timestamp(6)
  submissions   submissions[]
  user_progress user_progress?
}

model roles {
  id          String    @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @unique @db.VarChar(255)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users[]
}

model submissions {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String    @unique @db.Uuid
  level_id        String    @db.Uuid
  submission_data Json
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  updated_at      DateTime? @default(now()) @db.Timestamp(6)
  submitted_at    DateTime? @default(now()) @db.Timestamp(6)
  levels          levels    @relation(fields: [level_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_progress {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String    @db.Uuid
  level_id         String    @db.Uuid
  completed        Boolean   @default(false)
  current_solution String?   // Store the user's current code
  test_case_results Json     // Array of TestCaseResult
  attempts         Int      @default(0)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  last_attempt_at  DateTime? @db.Timestamp(6)
  
  user            users     @relation(fields: [user_id], references: [id])
  level           levels    @relation(fields: [level_id], references: [id])
  
  @@unique([user_id, level_id])
}

model users {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username        String         @unique
  email           String         @unique
  hashed_password String
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  role_id         String         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissions     submissions?
  user_progress   user_progress?
  roles           roles          @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_id")
}
